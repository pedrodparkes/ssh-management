AWSTemplateFormatVersion: 2010-09-09
Description: 'VPC: highly available SSH bastion host/instance. Use StackName: MciBastion'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Parent Stacks
        Parameters:
          - ParentVPCStack
          - ParentAlertStack
      - Label:
          default: EC2 Parameters
        Parameters:
          - InstanceType
          - KeyName
          - IAMUserSSHAccess
          - LogsRetentionInDays
Parameters:
  ParentVPCStack:
    Description: Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.
    Type: String
    Default: MciVpc
  ParentAlertStack:
    Description: >-
      Optional but recommended stack name of parent alert stack based on
      operations/alert.yaml template.
    Type: String
    Default: MciAlert
  KeyName:
    Description: >-
      Optional key pair of the ec2-user to establish a SSH connection to the SSH
      bastion host/instance.
    Type: String
    Default: vitalii
  IAMUserSSHAccess:
    Description: >-
      Synchronize public keys of IAM users to enable personalized SSH access
      (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  InstanceType:
    Description: Instance type of the SSH bastion host/instance.
    Type: String
    Default: t2.nano
  LogsRetentionInDays:
    Description: Specifies the number of days you want to retain log events.
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
Mappings:
  RegionMap:
    ap-south-1:
      AMI: ami-3c89f653
    eu-west-2:
      AMI: ami-704e5814
    eu-west-1:
      AMI: ami-7d50491b
    ap-northeast-2:
      AMI: ami-9bab74f5
    ap-northeast-1:
      AMI: ami-bbf2f9dc
    sa-east-1:
      AMI: ami-1d660d71
    ca-central-1:
      AMI: ami-20db6444
    ap-southeast-1:
      AMI: ami-58d65b3b
    ap-southeast-2:
      AMI: ami-a18392c2
    eu-central-1:
      AMI: ami-8da700e2
    us-east-1:
      AMI: ami-643b1972
    us-east-2:
      AMI: ami-3883a55d
    us-west-1:
      AMI: ami-563a1736
    us-west-2:
      AMI: ami-a07379d9
Conditions:
  HasKeyName: !Not 
    - !Equals 
      - !Ref KeyName
      - ''
  HasIAMUserSSHAccess: !Equals 
    - !Ref IAMUserSSHAccess
    - 'true'
  HasAlertTopic: !Not 
    - !Equals 
      - !Ref ParentAlertStack
      - ''
Resources:
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref IAMRole
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ec2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AssociateAddress'
                Resource:
                  - '*'
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - 'arn:aws:logs:*:*:*'
  IAMPolicySSHAccess:
    Type: 'AWS::IAM::Policy'
    Condition: HasIAMUserSSHAccess
    Properties:
      Roles:
        - !Ref IAMRole
      PolicyName: iam
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'iam:ListUsers'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'iam:ListSSHPublicKeys'
              - 'iam:GetSSHPublicKey'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default: !If 
            - HasIAMUserSSHAccess
            - - awslogs
              - ssh-access
              - config
              - addpackages
            - - awslogs
              - config
              - addpackages
        addpackages:
          packages:
            yum:
              telnet: []
              links: []
              mc: []
              wget: []
              curl: []
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${Logs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${Logs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${Logs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${Logs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${Logs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${Logs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${Logs}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - awslogs
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf
        ssh-access:
          files:
            /opt/import_users.sh:
              content: >
                rm -f /home/ec2-user/.ssh/authorized_keys;aws iam list-users --query "Users[].[UserName]" --output text | while read User; do aws iam list-ssh-public-keys --user-name "$User" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read KeyId; do aws iam get-ssh-public-key --user-name "$User" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text >> /home/ec2-user/.ssh/authorized_keys; done; done;
              mode: '000755'
              owner: root
              group: root
            /etc/cron.d/import_users:
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
          commands:
            c_import_users:
              command: ./import_users.sh
              cwd: /opt
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub >
                [cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init

                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName}
                --region=${AWS::Region} --resource=LaunchConfiguration

                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      AssociatePublicIpAddress: true
      EbsOptimized: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !ImportValue 
          'Fn::Sub': '${ParentVPCStack}-BastionSecurityGroupId'
      KeyName: !If 
        - HasKeyName
        - !Ref KeyName
        - !Ref 'AWS::NoValue'
      UserData: !Base64 
        'Fn::Sub': >
          #!/bin/bash -x

          INSTANCEID=$(curl -s -m 60
          http://169.254.169.254/latest/meta-data/instance-id)

          aws --region ${AWS::Region} ec2 associate-address --instance-id
          $INSTANCEID --allocation-id ${EIP.AllocationId} &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource
          LaunchConfiguration --region ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource
          AutoScalingGroup --region ${AWS::Region}
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: 1
      MinSize: 1
      Tags:
        - Key: Name
          Value: !Sub 
            - Bastion
            - ClassB: '0'
          PropagateAtLaunch: true
      NotificationConfigurations: !If 
        - HasAlertTopic
        - - NotificationTypes:
              - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
              - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
            TopicARN: !ImportValue 
              'Fn::Sub': '${ParentAlertStack}-TopicARN'
        - !Ref 'AWS::NoValue'
      VPCZoneIdentifier: !Split 
        - ','
        - !ImportValue 
          'Fn::Sub': '${ParentVPCStack}-PublicSubnets'
  CPUTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Average CPU utilization over last 10 minutes higher than 80%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
        - !ImportValue 
          'Fn::Sub': '${ParentAlertStack}-TopicARN'
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
Outputs:
  BastionIp:
    Description: The public IP address of the SSH bastion host/instance.
    Value: !Ref EIP
    Export:
      Name: !Sub '${AWS::StackName}-BastionIp'